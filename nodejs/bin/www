#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs:server');
var http = require('http');
const axios = require('axios')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// setup websocket for frontend communication
const WebSocketServer = require('websocket').server;
const wsServer = new WebSocketServer({
  httpServer: server,
  // You should not use autoAcceptConnections for production
  // applications, as it defeats all standard cross-origin protection
  // facilities built into the protocol and the browser.  You should
  // *always* verify the connection's origin and decide whether or not
  // to accept it.
  autoAcceptConnections: false
});

wsServer.on('request', function(request) {
  global.connection = request.accept('echo-protocol', request.origin);
  console.log((new Date()) + ' Connection accepted.');

  global.connection.on('message', function(message) {
    if (message.type === 'utf8') {
      console.log('Received Message: ' + message.utf8Data);
      global.connection.sendUTF(message.utf8Data);

      // simulate payment done event
      if (global.connection.utf8Data.action === 'pay_done') {
        axios.post(`https://dialogflow.googleapis.com/v2/projects/tinco-1e8d6/agent/sessions/${global.connection.utf8Data.sessionId}:detectIntent`, {
          queryInput: {
            event: {
              name: 'PAY_DONE_CONFIRM',
              languageCode: "en-US"
            }
          }
        }, {
          headers: {
            Authorization: `Bearer 4b6dc071bb194b92b08e1cf5b141bd0c`
          }
        })
      }
    }
    else if (message.type === 'binary') {
      console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
      global.connection.sendBytes(message.binaryData);
    }
  });
  global.connection.on('close', function(reasonCode, description) {
    console.log((new Date()) + ' Peer ' + global.connection.remoteAddress + ' disconnected.');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
